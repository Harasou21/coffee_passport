{"version":3,"file":"js/tag-0d3e4ff712b2b32580e6.js","sources":["webpack:///webpack/bootstrap","webpack:///./app/javascript/packs/tag.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/packs/tag.js\");\n","if (location.pathname.match(\"drinks/new\")){\n  // location.pathnameは\n  // 現在ページのURLのパスを取得、変更\n  // .matchは引数に渡された文字列のマッチング結果を返す\n\n  // 現在drinks/new にいる時にイベント発火\n  document.addEventListener(\"DOMContentLoaded\",()=>{\n    // addEventListenerは様々なイベント処理を実行\n    // することができるメソッド\n\n    // documentはhtml要素全体\n\n    // DOMContentLoaded\"は\n    // Webページ読み込みが完了した時に発動\n\n    // イベント発火する範囲広くね、、、？\n    const inputElement = document.getElementById(\"drink_tag_tag_name\")\n    // tweets_tag_nameはform_withが自動で生成してくれるid\n    \n    // form_withのモデルに渡したインスタンスのスネークケース\n    // + 入力する時のカラム名\n\n    // 今回で言うとform_withに渡してるモデルが@drinkで\n    // @drinkはnewアクションで@drink = DrinkTagと定義\n    // しているので、まずdrink_tagになり\n    // 入力するカラム名がtag_nameなので\n    // drink_tag_tag_nameになる\n\n    inputElement.addEventListener(\"keyup\",()=>{\n      // フォームに入力して、キーボードが離されたタイミング\n      // で順次イベント発火していく\n\n      const keyword = document.getElementById(\"drink_tag_tag_name\").value;\n      // テキストボックスの入力した値を取得\n      const XHR = new XMLHttpRequest();\n      // XHLHttpRequest とはAjaxを可能にするためのオブジェクトでサーバーに\n      // HTTPリクエストを非同期で行うことができます\n    \n      // インスタンスを生成して、変数に代入する\n      XHR.open(\"GET\",`search/?keyword=${keyword}`,true);\n      // openはリクエストの種類を指定する\n      // 第一引数 HTTPメソッドの指定\n      // 第二引数 パスの指定\n      // 第三引数 非同期通信のON/OFF\n\n      // GETリクエストで、\n      // ?でパラメーターを渡せる\n      // ?keywordはキーで、${keyword}が値\n\n      // queryパラメーターとは、http://sample.jp/?name=tanakaのように、\n      // 「？」以降に情報を綴るURLパラメーターです。\n      // 「？」以降の構造は、?<変数名>=<値>となっています。\n      // ?文字列とかの検索をかけたい時に使う\n\n      // サーチアクションを動かしたい\n      // drinksが省略されてる理由は\n      // 指定したパスの一個上のディレクトリを基準に\n      // 相対的にパスを指定できる\n\n\n\n      // とりあえず、drinks#searchにリクエストを送って\n      // 予測変換したい\n\n      XHR.responseType = \"json\";\n      // コントローラーから返却されるデータの形式には\n      // jsと相性がよく、データとして取り扱いやすい\n      // json形式を指定してる\n      XHR.send();\n      // tag.jsからサーバーサイドに送信したい\n      // リクエストを定義できたので、\n      // 送信する処理を記述しましょう\n      XHR.onload = () => {\n\n\n        const searchResult = document.getElementById(\"search-result\");\n        // 1.タグを表示させる場所である,search-resultを取得\n        searchResult.innerHTML = \"\";\n        // 同じタグが何度も表示されたままになってしまう\n        // 直前の検索結果を消したい\n\n        // 検索結果を挿入してる要素のinnerHTMLプロパティに\n        // 対して、空の文字列を指定することで、表示されてる\n        // タグを消します\n\n        // 最初にこの処理が呼び出される時は当然何もないので空文字でいいし\n        // ２回目に呼び出された時はsearch-resultが空になる\n        if (XHR.response){\n          // イベントに指定したkeyupは、バックスペースキー\n          // などの押しても文字入力されないキーでも発火してしまう\n\n          // 存在しないものをtagNameに定義するとエラーが起こる\n\n          // レスポンスにデータがある場合のみタグを表示させる処理を行おう\n\n          const tagName = XHR.response.keyword;\n          // サーバーサイドの処理が成功した時に\n          // レスポンスとして返って来るデータを\n          // 受け取って,変数に代入\n  \n          // データの受け取りには\n          // responseプロパティを使用する\n\n          tagName.forEach((tag) => {\n          // forEachを使う理由は、railsのsearchアクション\n          // で、検索に引っかかったタグを、複数出していく\n          // 場合もあるので\n          const childElement = document.createElement(\"div\");\n          // 2.タグを表示させるための要素を生成してる\n          // 名前の通り,要素を作るメソッド\n         \n\n          childElement.setAttribute(\"class\", \"child\");\n          childElement.setAttribute(\"id\", tag.id);\n          // 作ったdivタグにclass,idを付与する\n          // forEachで作られたローカル変数のtagをここで使ってる\n\n          childElement.innerHTML = tag.tag_name;\n          // <div>tagname</div> って感じ\n          // innerHTML を使用すると、\n          // 中身を入れ替えたり、書き換えたり、入れたりする\n          // 3.サーバーサイドから返ってきたtagのtag_name\n          // をchildElementの中に入れてくイメージ\n           searchResult.appendChild(childElement);\n          // htmlのsearch-resultの子要素に\n          // childElementが並んでく\n\n          // ここで初めて表示していく\n          \n          const clickElement = document.getElementById(tag.id);\n          // クリックしたタグ名がフォームに入力されるようにしたい\n\n          // 入力していったら,id = tag.idのdivのhtml要素\n          // ができているはずなので、それを取得\n          clickElement.addEventListener(\"click\",()=>{\n            // clickElement要素をクリックした時にイベント発火\n            document.getElementById(\"drink_tag_tag_name\").value = clickElement.textContent;\n            // form_withで作られたidの要素を取得  \n            // さらに.valueとすることで、実際に入力された\n            // 値を取得\n\n            // clickElementはタグの名前があるので、\n            // .textContentでタグの名前を取得できる\n\n            // これでタグの部分をクリックしたら、タグの名前が\n            // フォームに入ってく\n            clickElement.remove();\n            // クリックしたタグのみ消える\n          });\n          });\n        };\n      };\n    });\n  });\n}else if(location.pathname.match(\"drinks/searchingform\")){\n  document.addEventListener(\"DOMContentLoaded\",()=>{\n    // addEventListenerは様々なイベント処理を実行\n    // することができるメソッド\n\n    // documentはhtml要素全体\n\n    // DOMContentLoaded\"は\n    // Webページ読み込みが完了した時に発動\n\n    // イベント発火する範囲広くね、、、？\n    const inputElement = document.getElementById(\"q_name_cont\")\n    // tweets_tag_nameはform_withが自動で生成してくれるid\n    \n    // form_withのモデルに渡したインスタンスのスネークケース\n    // + 入力する時のカラム名\n\n    // 今回で言うとform_withに渡してるモデルが@drinkで\n    // @drinkはnewアクションで@drink = DrinkTagと定義\n    // しているので、まずdrink_tagになり\n    // 入力するカラム名がtag_nameなので\n    // drink_tag_tag_nameになる\n\n    inputElement.addEventListener(\"keyup\",()=>{\n      // フォームに入力して、キーボードが離されたタイミング\n      // で順次イベント発火していく\n\n      const keyword = document.getElementById(\"q_name_cont\").value;\n      // テキストボックスの入力した値を取得\n      const XHR = new XMLHttpRequest();\n      // XHLHttpRequest とはAjaxを可能にするためのオブジェクトでサーバーに\n      // HTTPリクエストを非同期で行うことができます\n    \n      // インスタンスを生成して、変数に代入する\n      XHR.open(\"GET\",`search/?keyword=${keyword}`,true);\n      // openはリクエストの種類を指定する\n      // 第一引数 HTTPメソッドの指定\n      // 第二引数 パスの指定\n      // 第三引数 非同期通信のON/OFF\n\n      // GETリクエストで、\n      // ?でパラメーターを渡せる\n      // ?keywordはキーで、${keyword}が値\n\n      // queryパラメーターとは、http://sample.jp/?name=tanakaのように、\n      // 「？」以降に情報を綴るURLパラメーターです。\n      // 「？」以降の構造は、?<変数名>=<値>となっています。\n      // ?文字列とかの検索をかけたい時に使う\n\n      // サーチアクションを動かしたい\n      // drinksが省略されてる理由は\n      // 指定したパスの一個上のディレクトリを基準に\n      // 相対的にパスを指定できる\n\n\n\n      // とりあえず、drinks#searchにリクエストを送って\n      // 予測変換したい\n\n      XHR.responseType = \"json\";\n      // コントローラーから返却されるデータの形式には\n      // jsと相性がよく、データとして取り扱いやすい\n      // json形式を指定してる\n      XHR.send();\n      // tag.jsからサーバーサイドに送信したい\n      // リクエストを定義できたので、\n      // 送信する処理を記述しましょう\n      XHR.onload = () => {\n\n\n        const searchResult = document.getElementById(\"search-result\");\n        // 1.タグを表示させる場所である,search-resultを取得\n        searchResult.innerHTML = \"\";\n        // 同じタグが何度も表示されたままになってしまう\n        // 直前の検索結果を消したい\n\n        // 検索結果を挿入してる要素のinnerHTMLプロパティに\n        // 対して、空の文字列を指定することで、表示されてる\n        // タグを消します\n\n        // 最初にこの処理が呼び出される時は当然何もないので空文字でいいし\n        // ２回目に呼び出された時はsearch-resultが空になる\n        if (XHR.response){\n          // イベントに指定したkeyupは、バックスペースキー\n          // などの押しても文字入力されないキーでも発火してしまう\n\n          // 存在しないものをtagNameに定義するとエラーが起こる\n\n          // レスポンスにデータがある場合のみタグを表示させる処理を行おう\n\n          const tagName = XHR.response.keyword;\n          // サーバーサイドの処理が成功した時に\n          // レスポンスとして返って来るデータを\n          // 受け取って,変数に代入\n  \n          // データの受け取りには\n          // responseプロパティを使用する\n\n          tagName.forEach((tag) => {\n          // forEachを使う理由は、railsのsearchアクション\n          // で、検索に引っかかったタグを、複数出していく\n          // 場合もあるので\n          const childElement = document.createElement(\"div\");\n          // 2.タグを表示させるための要素を生成してる\n          // 名前の通り,要素を作るメソッド\n         \n\n          childElement.setAttribute(\"class\", \"child\");\n          childElement.setAttribute(\"id\", tag.id);\n          // 作ったdivタグにclass,idを付与する\n          // forEachで作られたローカル変数のtagをここで使ってる\n\n          childElement.innerHTML = tag.tag_name;\n          // <div>tagname</div> って感じ\n          // innerHTML を使用すると、\n          // 中身を入れ替えたり、書き換えたり、入れたりする\n          // 3.サーバーサイドから返ってきたtagのtag_name\n          // をchildElementの中に入れてくイメージ\n           searchResult.appendChild(childElement);\n          // htmlのsearch-resultの子要素に\n          // childElementが並んでく\n\n          // ここで初めて表示していく\n          \n          const clickElement = document.getElementById(tag.id);\n          // クリックしたタグ名がフォームに入力されるようにしたい\n\n          // 入力していったら,id = tag.idのdivのhtml要素\n          // ができているはずなので、それを取得\n          clickElement.addEventListener(\"click\",()=>{\n            // clickElement要素をクリックした時にイベント発火\n            document.getElementById(\"drink_tag_tag_name\").value = clickElement.textContent;\n            // form_withで作られたidの要素を取得  \n            // さらに.valueとすることで、実際に入力された\n            // 値を取得\n\n            // clickElementはタグの名前があるので、\n            // .textContentでタグの名前を取得できる\n\n            // これでタグの部分をクリックしたら、タグの名前が\n            // フォームに入ってく\n            clickElement.remove();\n            // クリックしたタグのみ消える\n          });\n          });\n        };\n      };\n    });\n  });\n};"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AADA;;;;A","sourceRoot":""}